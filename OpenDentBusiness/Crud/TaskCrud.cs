//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class TaskCrud {
		///<summary>Gets one Task object from the database using the primary key.  Returns null if not found.</summary>
		public static Task SelectOne(long taskNum){
			string command="SELECT * FROM task "
				+"WHERE TaskNum = "+POut.Long(taskNum);
			List<Task> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Task object from the database using a query.</summary>
		public static Task SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Task> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Task objects from the database using a query.</summary>
		public static List<Task> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Task> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<Task> TableToList(DataTable table){
			List<Task> retVal=new List<Task>();
			Task task;
			for(int i=0;i<table.Rows.Count;i++) {
				task=new Task();
				task.TaskNum         = PIn.Long  (table.Rows[i]["TaskNum"].ToString());
				task.TaskListNum     = PIn.Long  (table.Rows[i]["TaskListNum"].ToString());
				task.DateTask        = PIn.Date  (table.Rows[i]["DateTask"].ToString());
				task.KeyNum          = PIn.Long  (table.Rows[i]["KeyNum"].ToString());
				task.Descript        = PIn.String(table.Rows[i]["Descript"].ToString());
				task.TaskStatus      = (OpenDentBusiness.TaskStatusEnum)PIn.Int(table.Rows[i]["TaskStatus"].ToString());
				task.IsRepeating     = PIn.Bool  (table.Rows[i]["IsRepeating"].ToString());
				task.DateType        = (OpenDentBusiness.TaskDateType)PIn.Int(table.Rows[i]["DateType"].ToString());
				task.FromNum         = PIn.Long  (table.Rows[i]["FromNum"].ToString());
				task.ObjectType      = (OpenDentBusiness.TaskObjectType)PIn.Int(table.Rows[i]["ObjectType"].ToString());
				task.DateTimeEntry   = PIn.DateT (table.Rows[i]["DateTimeEntry"].ToString());
				task.UserNum         = PIn.Long  (table.Rows[i]["UserNum"].ToString());
				task.DateTimeFinished= PIn.DateT (table.Rows[i]["DateTimeFinished"].ToString());
				task.PriorityDefNum  = PIn.Long  (table.Rows[i]["PriorityDefNum"].ToString());
				retVal.Add(task);
			}
			return retVal;
		}

		///<summary>Inserts one Task into the database.  Returns the new priKey.</summary>
		public static long Insert(Task task){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				task.TaskNum=DbHelper.GetNextOracleKey("task","TaskNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(task,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							task.TaskNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(task,false);
			}
		}

		///<summary>Inserts one Task into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(Task task,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				task.TaskNum=ReplicationServers.GetKey("task","TaskNum");
			}
			string command="INSERT INTO task (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="TaskNum,";
			}
			command+="TaskListNum,DateTask,KeyNum,Descript,TaskStatus,IsRepeating,DateType,FromNum,ObjectType,DateTimeEntry,UserNum,DateTimeFinished,PriorityDefNum) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(task.TaskNum)+",";
			}
			command+=
				     POut.Long  (task.TaskListNum)+","
				+    POut.Date  (task.DateTask)+","
				+    POut.Long  (task.KeyNum)+","
				+    DbHelper.ParamChar+"paramDescript,"
				+    POut.Int   ((int)task.TaskStatus)+","
				+    POut.Bool  (task.IsRepeating)+","
				+    POut.Int   ((int)task.DateType)+","
				+    POut.Long  (task.FromNum)+","
				+    POut.Int   ((int)task.ObjectType)+","
				+    POut.DateT (task.DateTimeEntry)+","
				+    POut.Long  (task.UserNum)+","
				+    POut.DateT (task.DateTimeFinished)+","
				+    POut.Long  (task.PriorityDefNum)+")";
			if(task.Descript==null) {
				task.Descript="";
			}
			OdSqlParameter paramDescript=new OdSqlParameter("paramDescript",OdDbType.Text,task.Descript);
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramDescript);
			}
			else {
				task.TaskNum=Db.NonQ(command,true,paramDescript);
			}
			return task.TaskNum;
		}

		///<summary>Updates one Task in the database.</summary>
		public static void Update(Task task){
			string command="UPDATE task SET "
				+"TaskListNum     =  "+POut.Long  (task.TaskListNum)+", "
				+"DateTask        =  "+POut.Date  (task.DateTask)+", "
				+"KeyNum          =  "+POut.Long  (task.KeyNum)+", "
				+"Descript        =  "+DbHelper.ParamChar+"paramDescript, "
				+"TaskStatus      =  "+POut.Int   ((int)task.TaskStatus)+", "
				+"IsRepeating     =  "+POut.Bool  (task.IsRepeating)+", "
				+"DateType        =  "+POut.Int   ((int)task.DateType)+", "
				+"FromNum         =  "+POut.Long  (task.FromNum)+", "
				+"ObjectType      =  "+POut.Int   ((int)task.ObjectType)+", "
				+"DateTimeEntry   =  "+POut.DateT (task.DateTimeEntry)+", "
				+"UserNum         =  "+POut.Long  (task.UserNum)+", "
				+"DateTimeFinished=  "+POut.DateT (task.DateTimeFinished)+", "
				+"PriorityDefNum  =  "+POut.Long  (task.PriorityDefNum)+" "
				+"WHERE TaskNum = "+POut.Long(task.TaskNum);
			if(task.Descript==null) {
				task.Descript="";
			}
			OdSqlParameter paramDescript=new OdSqlParameter("paramDescript",OdDbType.Text,task.Descript);
			Db.NonQ(command,paramDescript);
		}

		///<summary>Updates one Task in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(Task task,Task oldTask){
			string command="";
			if(task.TaskListNum != oldTask.TaskListNum) {
				if(command!=""){ command+=",";}
				command+="TaskListNum = "+POut.Long(task.TaskListNum)+"";
			}
			if(task.DateTask != oldTask.DateTask) {
				if(command!=""){ command+=",";}
				command+="DateTask = "+POut.Date(task.DateTask)+"";
			}
			if(task.KeyNum != oldTask.KeyNum) {
				if(command!=""){ command+=",";}
				command+="KeyNum = "+POut.Long(task.KeyNum)+"";
			}
			if(task.Descript != oldTask.Descript) {
				if(command!=""){ command+=",";}
				command+="Descript = "+DbHelper.ParamChar+"paramDescript";
			}
			if(task.TaskStatus != oldTask.TaskStatus) {
				if(command!=""){ command+=",";}
				command+="TaskStatus = "+POut.Int   ((int)task.TaskStatus)+"";
			}
			if(task.IsRepeating != oldTask.IsRepeating) {
				if(command!=""){ command+=",";}
				command+="IsRepeating = "+POut.Bool(task.IsRepeating)+"";
			}
			if(task.DateType != oldTask.DateType) {
				if(command!=""){ command+=",";}
				command+="DateType = "+POut.Int   ((int)task.DateType)+"";
			}
			if(task.FromNum != oldTask.FromNum) {
				if(command!=""){ command+=",";}
				command+="FromNum = "+POut.Long(task.FromNum)+"";
			}
			if(task.ObjectType != oldTask.ObjectType) {
				if(command!=""){ command+=",";}
				command+="ObjectType = "+POut.Int   ((int)task.ObjectType)+"";
			}
			if(task.DateTimeEntry != oldTask.DateTimeEntry) {
				if(command!=""){ command+=",";}
				command+="DateTimeEntry = "+POut.DateT(task.DateTimeEntry)+"";
			}
			if(task.UserNum != oldTask.UserNum) {
				if(command!=""){ command+=",";}
				command+="UserNum = "+POut.Long(task.UserNum)+"";
			}
			if(task.DateTimeFinished != oldTask.DateTimeFinished) {
				if(command!=""){ command+=",";}
				command+="DateTimeFinished = "+POut.DateT(task.DateTimeFinished)+"";
			}
			if(task.PriorityDefNum != oldTask.PriorityDefNum) {
				if(command!=""){ command+=",";}
				command+="PriorityDefNum = "+POut.Long(task.PriorityDefNum)+"";
			}
			if(command==""){
				return false;
			}
			if(task.Descript==null) {
				task.Descript="";
			}
			OdSqlParameter paramDescript=new OdSqlParameter("paramDescript",OdDbType.Text,task.Descript);
			command="UPDATE task SET "+command
				+" WHERE TaskNum = "+POut.Long(task.TaskNum);
			Db.NonQ(command,paramDescript);
			return true;
		}

		///<summary>Deletes one Task from the database.</summary>
		public static void Delete(long taskNum){
			string command="DELETE FROM task "
				+"WHERE TaskNum = "+POut.Long(taskNum);
			Db.NonQ(command);
		}

	}
}