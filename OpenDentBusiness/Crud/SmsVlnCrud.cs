//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class SmsVlnCrud {
		///<summary>Gets one SmsVln object from the database using the primary key.  Returns null if not found.</summary>
		public static SmsVln SelectOne(long smsVlnNum){
			string command="SELECT * FROM smsvln "
				+"WHERE SmsVlnNum = "+POut.Long(smsVlnNum);
			List<SmsVln> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one SmsVln object from the database using a query.</summary>
		public static SmsVln SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SmsVln> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of SmsVln objects from the database using a query.</summary>
		public static List<SmsVln> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SmsVln> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<SmsVln> TableToList(DataTable table){
			List<SmsVln> retVal=new List<SmsVln>();
			SmsVln smsVln;
			for(int i=0;i<table.Rows.Count;i++) {
				smsVln=new SmsVln();
				smsVln.SmsVlnNum   = PIn.Long  (table.Rows[i]["SmsVlnNum"].ToString());
				smsVln.ClinicNum   = PIn.Long  (table.Rows[i]["ClinicNum"].ToString());
				smsVln.VlnNumber   = PIn.String(table.Rows[i]["VlnNumber"].ToString());
				smsVln.DateActive  = PIn.DateT (table.Rows[i]["DateActive"].ToString());
				smsVln.DateInactive= PIn.DateT (table.Rows[i]["DateInactive"].ToString());
				smsVln.InactiveCode= PIn.String(table.Rows[i]["InactiveCode"].ToString());
				retVal.Add(smsVln);
			}
			return retVal;
		}

		///<summary>Inserts one SmsVln into the database.  Returns the new priKey.</summary>
		public static long Insert(SmsVln smsVln){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				smsVln.SmsVlnNum=DbHelper.GetNextOracleKey("smsvln","SmsVlnNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(smsVln,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							smsVln.SmsVlnNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(smsVln,false);
			}
		}

		///<summary>Inserts one SmsVln into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(SmsVln smsVln,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				smsVln.SmsVlnNum=ReplicationServers.GetKey("smsvln","SmsVlnNum");
			}
			string command="INSERT INTO smsvln (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="SmsVlnNum,";
			}
			command+="ClinicNum,VlnNumber,DateActive,DateInactive,InactiveCode) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(smsVln.SmsVlnNum)+",";
			}
			command+=
				     POut.Long  (smsVln.ClinicNum)+","
				+"'"+POut.String(smsVln.VlnNumber)+"',"
				+    POut.DateT (smsVln.DateActive)+","
				+    POut.DateT (smsVln.DateInactive)+","
				+"'"+POut.String(smsVln.InactiveCode)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				smsVln.SmsVlnNum=Db.NonQ(command,true);
			}
			return smsVln.SmsVlnNum;
		}

		///<summary>Updates one SmsVln in the database.</summary>
		public static void Update(SmsVln smsVln){
			string command="UPDATE smsvln SET "
				+"ClinicNum   =  "+POut.Long  (smsVln.ClinicNum)+", "
				+"VlnNumber   = '"+POut.String(smsVln.VlnNumber)+"', "
				+"DateActive  =  "+POut.DateT (smsVln.DateActive)+", "
				+"DateInactive=  "+POut.DateT (smsVln.DateInactive)+", "
				+"InactiveCode= '"+POut.String(smsVln.InactiveCode)+"' "
				+"WHERE SmsVlnNum = "+POut.Long(smsVln.SmsVlnNum);
			Db.NonQ(command);
		}

		///<summary>Updates one SmsVln in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(SmsVln smsVln,SmsVln oldSmsVln){
			string command="";
			if(smsVln.ClinicNum != oldSmsVln.ClinicNum) {
				if(command!=""){ command+=",";}
				command+="ClinicNum = "+POut.Long(smsVln.ClinicNum)+"";
			}
			if(smsVln.VlnNumber != oldSmsVln.VlnNumber) {
				if(command!=""){ command+=",";}
				command+="VlnNumber = '"+POut.String(smsVln.VlnNumber)+"'";
			}
			if(smsVln.DateActive != oldSmsVln.DateActive) {
				if(command!=""){ command+=",";}
				command+="DateActive = "+POut.DateT(smsVln.DateActive)+"";
			}
			if(smsVln.DateInactive != oldSmsVln.DateInactive) {
				if(command!=""){ command+=",";}
				command+="DateInactive = "+POut.DateT(smsVln.DateInactive)+"";
			}
			if(smsVln.InactiveCode != oldSmsVln.InactiveCode) {
				if(command!=""){ command+=",";}
				command+="InactiveCode = '"+POut.String(smsVln.InactiveCode)+"'";
			}
			if(command==""){
				return false;
			}
			command="UPDATE smsvln SET "+command
				+" WHERE SmsVlnNum = "+POut.Long(smsVln.SmsVlnNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Deletes one SmsVln from the database.</summary>
		public static void Delete(long smsVlnNum){
			string command="DELETE FROM smsvln "
				+"WHERE SmsVlnNum = "+POut.Long(smsVlnNum);
			Db.NonQ(command);
		}

	}
}