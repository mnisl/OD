//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class CptCrud {
		///<summary>Gets one Cpt object from the database using the primary key.  Returns null if not found.</summary>
		public static Cpt SelectOne(long cptNum){
			string command="SELECT * FROM cpt "
				+"WHERE CptNum = "+POut.Long(cptNum);
			List<Cpt> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Cpt object from the database using a query.</summary>
		public static Cpt SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Cpt> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Cpt objects from the database using a query.</summary>
		public static List<Cpt> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Cpt> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<Cpt> TableToList(DataTable table){
			List<Cpt> retVal=new List<Cpt>();
			Cpt cpt;
			for(int i=0;i<table.Rows.Count;i++) {
				cpt=new Cpt();
				cpt.CptNum     = PIn.Long  (table.Rows[i]["CptNum"].ToString());
				cpt.CptCode    = PIn.String(table.Rows[i]["CptCode"].ToString());
				cpt.Description= PIn.String(table.Rows[i]["Description"].ToString());
				cpt.VersionIDs = PIn.String(table.Rows[i]["VersionIDs"].ToString());
				retVal.Add(cpt);
			}
			return retVal;
		}

		///<summary>Inserts one Cpt into the database.  Returns the new priKey.</summary>
		public static long Insert(Cpt cpt){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				cpt.CptNum=DbHelper.GetNextOracleKey("cpt","CptNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(cpt,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							cpt.CptNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(cpt,false);
			}
		}

		///<summary>Inserts one Cpt into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(Cpt cpt,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				cpt.CptNum=ReplicationServers.GetKey("cpt","CptNum");
			}
			string command="INSERT INTO cpt (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="CptNum,";
			}
			command+="CptCode,Description,VersionIDs) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(cpt.CptNum)+",";
			}
			command+=
				 "'"+POut.String(cpt.CptCode)+"',"
				+"'"+POut.String(cpt.Description)+"',"
				+"'"+POut.String(cpt.VersionIDs)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				cpt.CptNum=Db.NonQ(command,true);
			}
			return cpt.CptNum;
		}

		///<summary>Updates one Cpt in the database.</summary>
		public static void Update(Cpt cpt){
			string command="UPDATE cpt SET "
				+"CptCode    = '"+POut.String(cpt.CptCode)+"', "
				+"Description= '"+POut.String(cpt.Description)+"', "
				+"VersionIDs = '"+POut.String(cpt.VersionIDs)+"' "
				+"WHERE CptNum = "+POut.Long(cpt.CptNum);
			Db.NonQ(command);
		}

		///<summary>Updates one Cpt in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(Cpt cpt,Cpt oldCpt){
			string command="";
			if(cpt.CptCode != oldCpt.CptCode) {
				if(command!=""){ command+=",";}
				command+="CptCode = '"+POut.String(cpt.CptCode)+"'";
			}
			if(cpt.Description != oldCpt.Description) {
				if(command!=""){ command+=",";}
				command+="Description = '"+POut.String(cpt.Description)+"'";
			}
			if(cpt.VersionIDs != oldCpt.VersionIDs) {
				if(command!=""){ command+=",";}
				command+="VersionIDs = '"+POut.String(cpt.VersionIDs)+"'";
			}
			if(command==""){
				return false;
			}
			command="UPDATE cpt SET "+command
				+" WHERE CptNum = "+POut.Long(cpt.CptNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Deletes one Cpt from the database.</summary>
		public static void Delete(long cptNum){
			string command="DELETE FROM cpt "
				+"WHERE CptNum = "+POut.Long(cptNum);
			Db.NonQ(command);
		}

	}
}