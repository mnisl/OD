//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class ProcButtonQuickCrud {
		///<summary>Gets one ProcButtonQuick object from the database using the primary key.  Returns null if not found.</summary>
		public static ProcButtonQuick SelectOne(long procButtonQuickNum){
			string command="SELECT * FROM procbuttonquick "
				+"WHERE ProcButtonQuickNum = "+POut.Long(procButtonQuickNum);
			List<ProcButtonQuick> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ProcButtonQuick object from the database using a query.</summary>
		public static ProcButtonQuick SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ProcButtonQuick> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ProcButtonQuick objects from the database using a query.</summary>
		public static List<ProcButtonQuick> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ProcButtonQuick> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<ProcButtonQuick> TableToList(DataTable table){
			List<ProcButtonQuick> retVal=new List<ProcButtonQuick>();
			ProcButtonQuick procButtonQuick;
			for(int i=0;i<table.Rows.Count;i++) {
				procButtonQuick=new ProcButtonQuick();
				procButtonQuick.ProcButtonQuickNum= PIn.Long  (table.Rows[i]["ProcButtonQuickNum"].ToString());
				procButtonQuick.Description       = PIn.String(table.Rows[i]["Description"].ToString());
				procButtonQuick.CodeValue         = PIn.String(table.Rows[i]["CodeValue"].ToString());
				procButtonQuick.Surf              = PIn.String(table.Rows[i]["Surf"].ToString());
				procButtonQuick.YPos              = PIn.Int   (table.Rows[i]["YPos"].ToString());
				procButtonQuick.ItemOrder         = PIn.Int   (table.Rows[i]["ItemOrder"].ToString());
				procButtonQuick.IsLabel           = PIn.Bool  (table.Rows[i]["IsLabel"].ToString());
				retVal.Add(procButtonQuick);
			}
			return retVal;
		}

		///<summary>Inserts one ProcButtonQuick into the database.  Returns the new priKey.</summary>
		public static long Insert(ProcButtonQuick procButtonQuick){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				procButtonQuick.ProcButtonQuickNum=DbHelper.GetNextOracleKey("procbuttonquick","ProcButtonQuickNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(procButtonQuick,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							procButtonQuick.ProcButtonQuickNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(procButtonQuick,false);
			}
		}

		///<summary>Inserts one ProcButtonQuick into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(ProcButtonQuick procButtonQuick,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				procButtonQuick.ProcButtonQuickNum=ReplicationServers.GetKey("procbuttonquick","ProcButtonQuickNum");
			}
			string command="INSERT INTO procbuttonquick (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ProcButtonQuickNum,";
			}
			command+="Description,CodeValue,Surf,YPos,ItemOrder,IsLabel) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(procButtonQuick.ProcButtonQuickNum)+",";
			}
			command+=
				 "'"+POut.String(procButtonQuick.Description)+"',"
				+"'"+POut.String(procButtonQuick.CodeValue)+"',"
				+"'"+POut.String(procButtonQuick.Surf)+"',"
				+    POut.Int   (procButtonQuick.YPos)+","
				+    POut.Int   (procButtonQuick.ItemOrder)+","
				+    POut.Bool  (procButtonQuick.IsLabel)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				procButtonQuick.ProcButtonQuickNum=Db.NonQ(command,true);
			}
			return procButtonQuick.ProcButtonQuickNum;
		}

		///<summary>Updates one ProcButtonQuick in the database.</summary>
		public static void Update(ProcButtonQuick procButtonQuick){
			string command="UPDATE procbuttonquick SET "
				+"Description       = '"+POut.String(procButtonQuick.Description)+"', "
				+"CodeValue         = '"+POut.String(procButtonQuick.CodeValue)+"', "
				+"Surf              = '"+POut.String(procButtonQuick.Surf)+"', "
				+"YPos              =  "+POut.Int   (procButtonQuick.YPos)+", "
				+"ItemOrder         =  "+POut.Int   (procButtonQuick.ItemOrder)+", "
				+"IsLabel           =  "+POut.Bool  (procButtonQuick.IsLabel)+" "
				+"WHERE ProcButtonQuickNum = "+POut.Long(procButtonQuick.ProcButtonQuickNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ProcButtonQuick in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(ProcButtonQuick procButtonQuick,ProcButtonQuick oldProcButtonQuick){
			string command="";
			if(procButtonQuick.Description != oldProcButtonQuick.Description) {
				if(command!=""){ command+=",";}
				command+="Description = '"+POut.String(procButtonQuick.Description)+"'";
			}
			if(procButtonQuick.CodeValue != oldProcButtonQuick.CodeValue) {
				if(command!=""){ command+=",";}
				command+="CodeValue = '"+POut.String(procButtonQuick.CodeValue)+"'";
			}
			if(procButtonQuick.Surf != oldProcButtonQuick.Surf) {
				if(command!=""){ command+=",";}
				command+="Surf = '"+POut.String(procButtonQuick.Surf)+"'";
			}
			if(procButtonQuick.YPos != oldProcButtonQuick.YPos) {
				if(command!=""){ command+=",";}
				command+="YPos = "+POut.Int(procButtonQuick.YPos)+"";
			}
			if(procButtonQuick.ItemOrder != oldProcButtonQuick.ItemOrder) {
				if(command!=""){ command+=",";}
				command+="ItemOrder = "+POut.Int(procButtonQuick.ItemOrder)+"";
			}
			if(procButtonQuick.IsLabel != oldProcButtonQuick.IsLabel) {
				if(command!=""){ command+=",";}
				command+="IsLabel = "+POut.Bool(procButtonQuick.IsLabel)+"";
			}
			if(command==""){
				return false;
			}
			command="UPDATE procbuttonquick SET "+command
				+" WHERE ProcButtonQuickNum = "+POut.Long(procButtonQuick.ProcButtonQuickNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Deletes one ProcButtonQuick from the database.</summary>
		public static void Delete(long procButtonQuickNum){
			string command="DELETE FROM procbuttonquick "
				+"WHERE ProcButtonQuickNum = "+POut.Long(procButtonQuickNum);
			Db.NonQ(command);
		}

	}
}